import type { Timestamp } from 'firebase/firestore';
import type { User as AuthUser } from 'firebase/auth';
import type { LucideIcon } from 'lucide-react';

export type FirebaseUser = AuthUser;

export interface UserProfile {
  uid: string;
  email: string | null;
  displayName: string | null;
  photoURL: string | null;
  role: 'user' | 'admin';
  lastLogin: Timestamp;
  createdAt: Timestamp;
}

export interface AllowedUserEntry {
  email: string; // Document ID in allowed_users collection
  role: 'user' | 'admin';
}

export interface UploadedImage {
  id: string; // unique id for list key, e.g., generated by crypto.randomUUID()
  name: string;
  previewUrl: string; // Data URL for client-side preview
  file?: File; // Actual file object, transient, not stored in Firestore
  url?: string; // URL after upload to Firebase Storage (future)
  storagePath?: string; // Path in Firebase Storage (future)
}

// This is what's stored in Firestore for an expense's images
export interface StoredImage {
  id: string;
  name: string;
  url: string; // URL from Firebase Storage
  storagePath: string; // Path in Firebase Storage
}

export interface Expense {
  id: string; // Firestore document ID
  userId: string;
  images: StoredImage[];
  companyAccount: boolean;
  type: 'debit' | 'credit';
  amount: number;
  currency: string;
  date: Timestamp;
  vendor: string;
  category: string; // Category ID
  createdAt: Timestamp;
  updatedAt: Timestamp;
}

export interface Category {
  id: string; // e.g., 'food', 'transport', or a UUID for custom
  name: string;
  iconName: keyof typeof import('lucide-react'); // For Lucide icon
  isCustom: boolean;
  userId?: string; // Only for custom categories, links to the user who created it
}

export interface Vendor {
  id: string;
  name: string;
}
